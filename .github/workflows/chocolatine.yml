name: chocolatine
on:
    push:
        branches-ignore:
            - "ga-ignore-*"
    pull_request:
        branches-ignore:
            - "ga-ignore-*"

env:
    MIRROR_URL: "git@github.com:EpitechPromo2028/B-DOP-200-MLH-2-1-chocolatine-corentin.bergaentzle.git"
    EXECUTABLES: "mysh"

jobs:
  check_coding_style:
      runs-on: ubuntu-latest
      name: "Check the coding style"
      container: ghcr.io/epitech/coding-style-checker:latest
      steps:
          - name: Extract all the files with Checkout
            uses: actions/checkout@v4
            with:
              fetch-depth: 0
          - id: check_coding_style
            run: |
              check.sh $(pwd) $(pwd)
              ERROR_VAR=$(cat $(pwd)/coding-style-reports.log)
              OIFS=$IFS
              IFS=$'\n'
              for ERROR in $ERROR_VAR; do
                  file1=($(echo "$ERROR" | cut -d ':' -f 1))
                  file3=($(echo "$ERROR" | cut -d ':' -f 3))
                  file4=($(echo "$ERROR" | cut -d ':' -f 4))
                  echo "::error file=$file1,title=$file3 coding style errors detected::$file4"
              done
              IFS=$OIFS
              if [[ -n $ERROR_VAR ]]
              then
                  exit 1
              else
                  echo No coding style errors
              fi

  check_program_compilation:
    needs: [check_coding_style]
    runs-on: ubuntu-latest
    name: "Check if the program compile"
    container: epitechcontent/epitest-docker:latest

    steps:
      - uses: actions/checkout@v4
      - id: check_program_compilation
        run: make
        timeout-minutes: 2
      - run: make clean
      - run: |
          OIFS=$IFS
          IFS=','
          for exec in $EXECUTABLES
            do
              ./$exec
            done
          IFS=$OIFS

  run_tests:
    needs: [check_program_compilation]
    runs-on: ubuntu-latest
    name: "Launch the tests"
    container: epitechcontent/epitest-docker:latest

    steps:
      - uses: actions/checkout@v4
      - id: run_tests
        run: make tests_run
        timeout-minutes: 2

  push_to_mirror:
    needs: [run_tests]
    name: "Push all files to mirror specified"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: pixta-dev/repository-mirroring-action@v1
        with:
              target_repo_url:${{ env.MIRROR_URL }}
              ssh_private_key:${{ secrets.GIT_SSH_PRIVATE_KEY }}